#!/bin/bash

( [ -z "$PS1" ] || [ "${TERM}" == "dumb" ] || [ -n "$INEMACS" ]) && return
source "$KONIX_CONFIG_DIR/shrc"
source "$KONIX_LIB_DIR/soblib.sh"
# Use emacs key bindings
set -o emacs

# make less more friendly for non-text input files
LESSPIPE="$(which lesspipe)"
[ -e "$LESSFILE" -a -x "$LESSFILE" ] && eval "$(lesspipe)"

# If this is an xterm set the title to user@host:dir
case "$TERM" in
	xterm*|rxvt*)
		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
		;;
	*)
		;;
esac
# ################################################################################
# Others
# ################################################################################
# ************************************************************
# Bash Comp
# ************************************************************
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

if [ -f /etc/profile.d/bash-completion.sh ]; then
    . /etc/profile.d/bash-completion.sh
fi

# source custom bash completions
OLD_IFS=$IFS
IFS=$'\n'
source "$KONIX_CONFIG_DIR/bash_completion"

# special case for notmuch completion
if [ -f "$KONIX_DEVEL_DIR/notmuch/completion/notmuch-completion.bash" ]
then
    source "$KONIX_DEVEL_DIR/notmuch/completion/notmuch-completion.bash"
fi

IFS=$OLD_IFS

# unset bash bmajor bminor

# do not generate a core dump by default to avoid dissemineting core dumps everywhere
# ulimit -c 209715200

# use the autocd feature to gain precious miliseconds
shopt -s autocd
# I like recursive globbing
shopt -s globstar

if which luarocks > /dev/null 2>&1
then
	eval `luarocks path`
fi

if which direnv > /dev/null 2>&1
then
    eval "$(direnv hook bash)"
fi

NIX_SETUP="${HOME}/.nix-profile/etc/profile.d/nix.sh"
if [ -e "${NIX_SETUP}" ]
then
    source "${NIX_SETUP}"
    if ! test -e "$HOME/.nix-profile/share/nix-direnv/direnvrc"
    then
        nix profile install nixpkgs#nix-direnv
    fi
    source "$HOME/.nix-profile/share/nix-direnv/direnvrc"
fi

# run import_env again to avoid nix from putting its binary dir in front of my
# path
import_env

if test -e "$HOME/.cargo/env"
then
    source "$HOME/.cargo/env"
fi

if which starship > /dev/null
then
	eval "$(starship init bash)"
fi
eval "$(zoxide init bash)"

konix_is_in_tmux () {
    test -n "${TMUX_PANE}"
}

konix_tmux_shows_current_window () {
    local current_index="$(tmux display-message -p '#{window_index}')"
    test "${KONIX_TMUX_WINDOW}" == "${current_index}"
}

konix_is_screen_on ( ) {
    test -e ~/.here
}

konix_wm_shows_byobu ( ) {
    DISPLAY="${DISPLAY:-:0}" konix_wmctrl_active_window.sh | grep -q byobu
}

konix_warn_it_took_too_long ( ) {
    local args=()
    if konix_was_inactive_for_a_very_long_time
    then
        args+=(-t boring)
    fi
    konix_display.py "${args[@]}" -o "'$(HISTTIMEFORMAT=":" history|tail -1|sed -r 's/^[^:]+:(.+)$/\1/')' took $(( STARSHIP_DURATION / 1000 ))s"
}

konix_was_active_not_long_ago ( ) {
    local last_activity="$(tmux display-message -p '#{client_activity}')"
    local now="$(date +%s)"
    test $(( now - last_activity )) -le 3
}

konix_was_inactive_for_a_very_long_time ( ) {
    local last_activity="$(tmux display-message -p '#{client_activity}')"
    local now="$(date +%s)"
    test $(( now - last_activity )) -gt 10
}

function konix_warn_if_took_too_long(){
    if test -z "${KONIX_BASH_WARN_IF_TOO_LONG}"
    then
        return
    fi
    if test -n "${KONIX_DURATION}" && test ${KONIX_DURATION} -gt 2
    then
        if konix_is_in_tmux
        then
            if konix_is_screen_on
               # in front of desktop
            then
                if ! ( konix_wm_shows_byobu && konix_tmux_shows_current_window )
                   # could not see it
                then
                    konix_warn_it_took_too_long
                fi
            else
                # maybe using my phone
                if ! ( konix_tmux_shows_current_window && konix_was_active_not_long_ago )
                then
                    konix_warn_it_took_too_long
                fi
            fi
        fi
    fi
}

PREEXEC_LOCATION="$HOME/.nix-profile/share/bash/bash-preexec.sh"
if ! test -f "${PREEXEC_LOCATION}"
then
    nix profile install nixpkgs#bash-preexec
fi
source "${PREEXEC_LOCATION}"

preexec_konix() {
    KONIX_STARTTIME="$(date +%s)"
    sob_preexec "$1"
}
preexec_functions+=(preexec_konix)

postexec_konix() {
    if test -n "${KONIX_STARTTIME}"
    then
        local endtime="$(date +%s)"
        KONIX_DURATION="$((endtime - KONIX_STARTTIME))"
        konix_warn_if_took_too_long
    fi
    sob_postexec
}
precmd_functions+=(postexec_konix)

eval "$(mcfly init bash)"
eval "$(mcfly-fzf init bash)"

# for gpg to work correctly, even in the terminal
GPG_TTY="$(tty)"
